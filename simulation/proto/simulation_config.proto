// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package aggregate_api_simulation;

option java_package = "com.google.aggregate.simulation";
option java_outer_classname = "ReportProto";

// Various protobuf messages used for simulation configuration

// Config for reports.
message ReportConfig {
  // Always set.
  // The bit-length of the conversion key. This value must be divisible by 8 to
  // pack into  ASCII string.
  optional int32 key_size = 1;

  // The number of n-query facts in a single report.
  optional int32 num_facts_per_report = 2;

  // Always set.
  // Params to generate a random `num_facts_per_report`.
  optional RandomParams random_num_facts_per_report_params = 3;

  // Always set.
  // Params to generate a random conversion key.
  optional RandomParams random_key_params = 4;

  // Always set.
  // Params to generate a random conversion value.
  optional RandomParams random_value_params = 5;
}

// Config for aggregatable report which consists of many encrypted conversion
// reports.
message AggregatableReportConfig {

  // Always set,
  // Number of reports to generate in aggregatable report.
  optional int64 num_reports = 1;

  // Always Set.
  optional ReportConfig report_config = 2;
}

// Parameters to generates random variable with distribution in range
// [start, end).
message RandomParams {
  // Always Set.
  optional int32 start = 1;

  // May not be set for CONSTANT and TEST distributions.
  optional int32 end = 2;

  // Always Set.
  optional Distribution distribution = 3;

  enum Distribution {
    UNIFORM = 1;
    FILE = 2;
    TEST = 3;
  }
}

// Config for running simulations.
message SimulationConfig {
  // Always set.
  // Bit size of the public and private encryption keys.
  optional int32 encryption_key_size = 1;

  // Set true if aggregatable reports should be generated.
  optional bool  run_aggregatable_report = 2;

  // Set true if the aggregation step should be generated. Note if this
  // field is set without run_aggregatable_report then the location of the
  // aggregatable reports must also be specified.
  optional bool  run_aggregation = 3;

  // Location of asymmetric keys.
  // Set if keys should be written to a file.
  // Must be set if running aggregation without aggregatable reports.
  optional string asymmetric_key_file_path = 4;

  // Set true if aggregation results should be logged.
  optional bool log_aggregation_results = 5;
}

// Config for the encryption key service.
message EncryptionKeyConfig {
  // Always set.
  // The encryption key id is used to identify the key to encrypt/decrypt with when using KMS.
  // Limit on number of encryption keys to encrypt a single aggregatable report with.
  optional int32 num_encryption_keys = 1;
  optional string key_vending_service_uri = 2;
}
