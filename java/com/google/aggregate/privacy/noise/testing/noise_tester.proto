// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package aggregate_api_testing;

option java_package = "com.google.aggregate.privacy.noise.testing.proto";
option java_outer_classname = "NoiseTester";

import "java/com/google/aggregate/privacy/noise/proto/privacy_parameters.proto";

// Parameters for configuring an approximate DP test
// See
// https://github.com/google/differential-privacy/blob/main/java/tests/com/google/privacy/differentialprivacy/statistical/LaplaceClosenessTest.java
// for more info.
message DpNoiseTesterParams {

  // Deviation from the delta value deemed acceptable.
  // Can set tighter values for delta_tolerance for larger values for
  // number_of_samples.
  optional double delta_tolerance = 2;  // Required.

  // Number of samples to construct a single distribution.
  // Large values will lead to more accurate distributions with a tradeoff of
  // runtime.
  optional int32 number_of_samples = 3;  // Required.

  // Parameters specifying a voting mechanism for evaluating multiple runs of a
  // particular statistical test. This is intended to reduce the probability of
  // error compared to evaluating just a single run of the respective test.
  optional int32 number_of_votes = 4;  // Required.

  // Value to noise.
  optional int64 raw_value = 5;  // Required.

  // Second set of noised sampled to be used in
  // StatisticalTestUtils.verifyApproximateDp is generated from
  // raw_value + distance.
  optional int64 distance = 6;  // Required.

  enum NoiseValueType {
    VALUE = 2;
  }

  optional NoiseValueType noise_value_type = 7;
}