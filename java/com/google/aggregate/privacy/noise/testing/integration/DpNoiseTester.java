/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.aggregate.privacy.noise.testing.integration;

import static com.google.common.collect.ImmutableList.toImmutableList;

import com.google.aggregate.privacy.noise.DpNoiseApplier.DpNoiseParams;
import com.google.aggregate.privacy.noise.testing.proto.NoiseTester.DpNoiseTesterParams;
import com.google.common.collect.ImmutableList;
import com.google.inject.Inject;
import com.google.privacy.differentialprivacy.testing.StatisticalTestsUtil;
import java.util.function.Supplier;
import java.util.stream.Stream;

/**
 * Differential privacy tester for testing noised samples generated by {@link
 * NoisedSamplesGenerator} for correctness.
 *
 * <p>Note: This tester is not deterministic since generating distributions inherently depend on
 * random values that are not generated with a seed. To reduce the probability of error due to
 * random values, we test for differential privacy {@code dpNoiseTesterParams.getNumberOfVotes()}
 * times and output the votes for the user to take action.
 */
public final class DpNoiseTester {

  NoisedSamplesGenerator noisedSamplesGenerator;
  Supplier<DpNoiseTesterParams> dpNoiseTesterParams;
  Supplier<DpNoiseParams> dpNoiseParams;

  @Inject
  public DpNoiseTester(
      NoisedSamplesGenerator noisedSamplesGenerator,
      Supplier<DpNoiseTesterParams> dpNoiseTesterParams,
      Supplier<DpNoiseParams> dpNoiseParams) {
    this.noisedSamplesGenerator = noisedSamplesGenerator;
    this.dpNoiseTesterParams = dpNoiseTesterParams;
    this.dpNoiseParams = dpNoiseParams;
  }

  /**
   * Checks noised samples generated by {@link NoisedSamplesGenerator} was generated by a
   * differentially private noising algorithm and returns result of each run.
   *
   * <p>An algorithm is considered differentially private if it describes a population without
   * providing any information on a single data point/individual. Note that this test does not make
   * claims about the distribution from which the noise is generated from.
   *
   * @return a list of boolean votes for which a true value indicates that the noising algorithm is
   *     differentially private with some provided tolerance for the given run.
   *     <p>The number of true values required to verify that the algorithm is differentially
   *     private is left up to the caller to decide.
   */
  public ImmutableList<Boolean> noiseIsDifferentiallyPrivate() {
    return runBallot();
  }

  /**
   * Verifies approx DP {@code numberOfVotes} times and returns the value of each vote.
   *
   * <p>Let n be the smallest odd integer greater or equal to {@code numberOfVotes}. This method is
   * intended to reduce the probability of error p of a randomized test by running the test n times
   * and taking the majority vote of the results. If the individual tests are independent, the
   * majority vote has a probability of error equal to F(floor(n/2)) where F is the CDF of a
   * binomial distribution over n trials with a success probability of 1 - p.
   */
  private ImmutableList<Boolean> runBallot() {
    return Stream.generate(this::generateVote)
        .limit(dpNoiseTesterParams.get().getNumberOfVotes())
        .collect(toImmutableList());
  }

  /**
   * Returns true if the distribution of noised values generated by the noising algo on a single raw
   * input and distribution of values generated by the nosing algo on a single raw input shifted by
   * some small constant are likely drawn from the approx same differentially private algorithm.
   */
  private boolean generateVote() {
    return StatisticalTestsUtil.verifyApproximateDp(
        noisedSamplesGenerator.generateNoisedSamples(),
        noisedSamplesGenerator.generateShiftedNoisedSamples(),
        dpNoiseParams.get().epsilon(),
        dpNoiseParams.get().delta().isPresent()
            ? dpNoiseParams.get().delta().getAsDouble()
            : 0, // laplace uses delta = 0
        dpNoiseTesterParams.get().getDeltaTolerance());
  }
}
